// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dma_connect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dma_5fconnect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dma_5fconnect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dma_5fconnect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dma_5fconnect_2eproto {
  static const uint32_t offsets[];
};
namespace dma_connect {
class doca_conn_info;
struct doca_conn_infoDefaultTypeInternal;
extern doca_conn_infoDefaultTypeInternal _doca_conn_info_default_instance_;
}  // namespace dma_connect
PROTOBUF_NAMESPACE_OPEN
template<> ::dma_connect::doca_conn_info* Arena::CreateMaybeMessage<::dma_connect::doca_conn_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dma_connect {

// ===================================================================

class doca_conn_info final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dma_connect.doca_conn_info) */ {
 public:
  inline doca_conn_info() : doca_conn_info(nullptr) {}
  ~doca_conn_info() override;
  explicit PROTOBUF_CONSTEXPR doca_conn_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  doca_conn_info(const doca_conn_info& from);
  doca_conn_info(doca_conn_info&& from) noexcept
    : doca_conn_info() {
    *this = ::std::move(from);
  }

  inline doca_conn_info& operator=(const doca_conn_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline doca_conn_info& operator=(doca_conn_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const doca_conn_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const doca_conn_info* internal_default_instance() {
    return reinterpret_cast<const doca_conn_info*>(
               &_doca_conn_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(doca_conn_info& a, doca_conn_info& b) {
    a.Swap(&b);
  }
  inline void Swap(doca_conn_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(doca_conn_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  doca_conn_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<doca_conn_info>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const doca_conn_info& from);
  void MergeFrom(const doca_conn_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(doca_conn_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dma_connect.doca_conn_info";
  }
  protected:
  explicit doca_conn_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExportsFieldNumber = 1,
    kBuffersPtrFieldNumber = 2,
    kBuffersSizeFieldNumber = 3,
  };
  // repeated bytes exports = 1;
  int exports_size() const;
  private:
  int _internal_exports_size() const;
  public:
  void clear_exports();
  const std::string& exports(int index) const;
  std::string* mutable_exports(int index);
  void set_exports(int index, const std::string& value);
  void set_exports(int index, std::string&& value);
  void set_exports(int index, const char* value);
  void set_exports(int index, const void* value, size_t size);
  std::string* add_exports();
  void add_exports(const std::string& value);
  void add_exports(std::string&& value);
  void add_exports(const char* value);
  void add_exports(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exports();
  private:
  const std::string& _internal_exports(int index) const;
  std::string* _internal_add_exports();
  public:

  // repeated uint64 buffers_ptr = 2;
  int buffers_ptr_size() const;
  private:
  int _internal_buffers_ptr_size() const;
  public:
  void clear_buffers_ptr();
  private:
  uint64_t _internal_buffers_ptr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_buffers_ptr() const;
  void _internal_add_buffers_ptr(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_buffers_ptr();
  public:
  uint64_t buffers_ptr(int index) const;
  void set_buffers_ptr(int index, uint64_t value);
  void add_buffers_ptr(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      buffers_ptr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_buffers_ptr();

  // repeated uint64 buffers_size = 3;
  int buffers_size_size() const;
  private:
  int _internal_buffers_size_size() const;
  public:
  void clear_buffers_size();
  private:
  uint64_t _internal_buffers_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_buffers_size() const;
  void _internal_add_buffers_size(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_buffers_size();
  public:
  uint64_t buffers_size(int index) const;
  void set_buffers_size(int index, uint64_t value);
  void add_buffers_size(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      buffers_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_buffers_size();

  // @@protoc_insertion_point(class_scope:dma_connect.doca_conn_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > buffers_ptr_;
  mutable std::atomic<int> _buffers_ptr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > buffers_size_;
  mutable std::atomic<int> _buffers_size_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dma_5fconnect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// doca_conn_info

// repeated bytes exports = 1;
inline int doca_conn_info::_internal_exports_size() const {
  return exports_.size();
}
inline int doca_conn_info::exports_size() const {
  return _internal_exports_size();
}
inline void doca_conn_info::clear_exports() {
  exports_.Clear();
}
inline std::string* doca_conn_info::add_exports() {
  std::string* _s = _internal_add_exports();
  // @@protoc_insertion_point(field_add_mutable:dma_connect.doca_conn_info.exports)
  return _s;
}
inline const std::string& doca_conn_info::_internal_exports(int index) const {
  return exports_.Get(index);
}
inline const std::string& doca_conn_info::exports(int index) const {
  // @@protoc_insertion_point(field_get:dma_connect.doca_conn_info.exports)
  return _internal_exports(index);
}
inline std::string* doca_conn_info::mutable_exports(int index) {
  // @@protoc_insertion_point(field_mutable:dma_connect.doca_conn_info.exports)
  return exports_.Mutable(index);
}
inline void doca_conn_info::set_exports(int index, const std::string& value) {
  exports_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dma_connect.doca_conn_info.exports)
}
inline void doca_conn_info::set_exports(int index, std::string&& value) {
  exports_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dma_connect.doca_conn_info.exports)
}
inline void doca_conn_info::set_exports(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exports_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dma_connect.doca_conn_info.exports)
}
inline void doca_conn_info::set_exports(int index, const void* value, size_t size) {
  exports_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dma_connect.doca_conn_info.exports)
}
inline std::string* doca_conn_info::_internal_add_exports() {
  return exports_.Add();
}
inline void doca_conn_info::add_exports(const std::string& value) {
  exports_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dma_connect.doca_conn_info.exports)
}
inline void doca_conn_info::add_exports(std::string&& value) {
  exports_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dma_connect.doca_conn_info.exports)
}
inline void doca_conn_info::add_exports(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exports_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dma_connect.doca_conn_info.exports)
}
inline void doca_conn_info::add_exports(const void* value, size_t size) {
  exports_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dma_connect.doca_conn_info.exports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
doca_conn_info::exports() const {
  // @@protoc_insertion_point(field_list:dma_connect.doca_conn_info.exports)
  return exports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
doca_conn_info::mutable_exports() {
  // @@protoc_insertion_point(field_mutable_list:dma_connect.doca_conn_info.exports)
  return &exports_;
}

// repeated uint64 buffers_ptr = 2;
inline int doca_conn_info::_internal_buffers_ptr_size() const {
  return buffers_ptr_.size();
}
inline int doca_conn_info::buffers_ptr_size() const {
  return _internal_buffers_ptr_size();
}
inline void doca_conn_info::clear_buffers_ptr() {
  buffers_ptr_.Clear();
}
inline uint64_t doca_conn_info::_internal_buffers_ptr(int index) const {
  return buffers_ptr_.Get(index);
}
inline uint64_t doca_conn_info::buffers_ptr(int index) const {
  // @@protoc_insertion_point(field_get:dma_connect.doca_conn_info.buffers_ptr)
  return _internal_buffers_ptr(index);
}
inline void doca_conn_info::set_buffers_ptr(int index, uint64_t value) {
  buffers_ptr_.Set(index, value);
  // @@protoc_insertion_point(field_set:dma_connect.doca_conn_info.buffers_ptr)
}
inline void doca_conn_info::_internal_add_buffers_ptr(uint64_t value) {
  buffers_ptr_.Add(value);
}
inline void doca_conn_info::add_buffers_ptr(uint64_t value) {
  _internal_add_buffers_ptr(value);
  // @@protoc_insertion_point(field_add:dma_connect.doca_conn_info.buffers_ptr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
doca_conn_info::_internal_buffers_ptr() const {
  return buffers_ptr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
doca_conn_info::buffers_ptr() const {
  // @@protoc_insertion_point(field_list:dma_connect.doca_conn_info.buffers_ptr)
  return _internal_buffers_ptr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
doca_conn_info::_internal_mutable_buffers_ptr() {
  return &buffers_ptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
doca_conn_info::mutable_buffers_ptr() {
  // @@protoc_insertion_point(field_mutable_list:dma_connect.doca_conn_info.buffers_ptr)
  return _internal_mutable_buffers_ptr();
}

// repeated uint64 buffers_size = 3;
inline int doca_conn_info::_internal_buffers_size_size() const {
  return buffers_size_.size();
}
inline int doca_conn_info::buffers_size_size() const {
  return _internal_buffers_size_size();
}
inline void doca_conn_info::clear_buffers_size() {
  buffers_size_.Clear();
}
inline uint64_t doca_conn_info::_internal_buffers_size(int index) const {
  return buffers_size_.Get(index);
}
inline uint64_t doca_conn_info::buffers_size(int index) const {
  // @@protoc_insertion_point(field_get:dma_connect.doca_conn_info.buffers_size)
  return _internal_buffers_size(index);
}
inline void doca_conn_info::set_buffers_size(int index, uint64_t value) {
  buffers_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:dma_connect.doca_conn_info.buffers_size)
}
inline void doca_conn_info::_internal_add_buffers_size(uint64_t value) {
  buffers_size_.Add(value);
}
inline void doca_conn_info::add_buffers_size(uint64_t value) {
  _internal_add_buffers_size(value);
  // @@protoc_insertion_point(field_add:dma_connect.doca_conn_info.buffers_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
doca_conn_info::_internal_buffers_size() const {
  return buffers_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
doca_conn_info::buffers_size() const {
  // @@protoc_insertion_point(field_list:dma_connect.doca_conn_info.buffers_size)
  return _internal_buffers_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
doca_conn_info::_internal_mutable_buffers_size() {
  return &buffers_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
doca_conn_info::mutable_buffers_size() {
  // @@protoc_insertion_point(field_mutable_list:dma_connect.doca_conn_info.buffers_size)
  return _internal_mutable_buffers_size();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dma_connect

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dma_5fconnect_2eproto
